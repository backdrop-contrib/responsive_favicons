<?php
/**
 * @file
 * Responsive favicons module file.
 */

/**
 * Implements hook_config_info().
 */
function responsive_favicons_config_info() {
  $info['responsive_favicons.settings'] = array(
    'label' => t('responsive_favicons settings'),
    'group' => t('responsive_favicons'),
  );
  return $info;
}

/**
 * Implements hook_permission().
 */
function responsive_favicons_permission() {
  return array(
    'administer responsive favicons' => array(
      'title' => t('Administer responsive favicons'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function responsive_favicons_menu() {
  // List of files to redirect.
  // For favicon.ico to work, you will need to comment out the following line
  // in your .htaccess file (see the README):
  // @code
  // RewriteCond %{REQUEST_URI} !=/favicon.ico
  // @endcode
  $files = responsive_favicons_load_all_icons()['files'];
  if (!empty($files)) {
    foreach ($files as $file) {
      $items[$file] = array(
        'page callback' => 'responsive_favicons_get_file',
        'page arguments' => array($file),
        'delivery callback' => 'responsive_favicons_deliver_file',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'responsive_favicons.delivery.inc',
      );
    }
  }

  $items['admin/config/user-interface/responsive_favicons'] = array(
    'title' => 'Responsive favicons',
    'description' => 'Configure responsive favicons',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('responsive_favicons_config_page'),
    'access callback' => 'user_access',
    'access arguments' => array('administer responsive favicons'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'responsive_favicons.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_preprocess_page().
 *
 * Adds responsive favicons to HTML head. A trailing newline is added to ensure
 * the next tag in the HTML head section starts on the next line.
 */
function responsive_favicons_preprocess_page(&$variables) {
  $tags = responsive_favicons_load_all_icons();

  if (!empty($tags['found'])) {
    $html = array(
      '#type' => 'markup',
      '#markup' => implode(PHP_EOL, $tags['found']) . PHP_EOL,
    );
    backdrop_add_html_head($html, 'responsive_favicons');
  }
}

/**
 * Implements hook_html_head_alter().
 */
function responsive_favicons_html_head_alter(&$head_elements) {
  $favicon_remove_default = config_get('responsive_favicons.settings', 'responsive_favicons_remove_default');
  if (empty($head_elements['responsive_favicons']) || $favicon_remove_default == 0) {
    return;
  }

  // Remove the default favicon from the head section.
  foreach ($head_elements as $key => $element) {
    if (!empty($element['#attributes'])) {
      if (array_key_exists('rel', $element['#attributes'])) {
        if ($element['#attributes']['rel'] === 'shortcut icon') {
          unset($head_elements[$key]);
        }
      }
    }
  }
}

/**
 * Load the responsive favicons that are valid.
 */
function responsive_favicons_load_all_icons() {
  $icons = &backdrop_static(__FUNCTION__);
  if (!isset($icons)) {
    if ($cached = cache_get('responsive_favicons_icons', 'cache')) {
      $icons = $cached->data;
    }
    else {
      $responsive_favicon_tags = config_get('responsive_favicons.settings', 'responsive_favicons_tags');
      if (empty($responsive_favicon_tags)) {
        $icons = array(
          'found' => array(),
          'missing' => array(),
        );
      }
      else {
        $html = implode(PHP_EOL, $responsive_favicon_tags);
        $icons = _responsive_favicons_validate_tags($html);
        if (empty($icons['missing'])) {
          cache_set('responsive_favicons_icons', $icons, 'cache');
        }
      }
    }
  }

  return $icons;
}

/**
 * Helper function to check whether responsive favicon files exist and are
 * readable. This function also strips any pasted content that is not a link or
 * a meta tag.
 *
 * @param string $html
 *   HTML tag.
 * @return array $missing_files
 */
function _responsive_favicons_validate_tags($html) {
  global $base_path;

  $found = array();
  $missing = array();
  // Store the files that exist in an array to send back so we can use this to
  // dynamically deliver any requests for these files at the root that ignore
  // the path in the 'link' tag.
  $files = array();

  $dom = new DOMDocument();
  $dom->loadHTML($html);

  // BACKDROP_ROOT contains the sub directory of the Backdrop install (if
  // present); in our case we do not want this as $file_path already contains
  // this.
  $docroot = preg_replace('/' . preg_quote($base_path, '/') . '$/', '/', BACKDROP_ROOT);

  // Find all the icons and other files.
  $tags = $dom->getElementsByTagName('link');
  foreach ($tags as $tag) {
    $file_path = _responsive_favicons_normalise_path($tag->getAttribute('href'));
    $tag->setAttribute('href', $file_path);

    if (file_exists($docroot . $file_path) && is_readable($docroot . $file_path)) {
      $found[] = $dom->saveXML($tag);
      $files[] = basename($file_path);
    }
    else {
      $missing[] = $dom->saveXML($tag);
    }
  }

  // Find any Windows 8 meta tags.
  $tags = $dom->getElementsByTagName('meta');
  foreach ($tags as $tag) {
    $name = $tag->getAttribute('name');

    // We only validate the image file.
    if ($name === 'msapplication-TileImage') {
      $file_path = _responsive_favicons_normalise_path($tag->getAttribute('content'));
      $tag->setAttribute('content', $file_path);

      if (file_exists($docroot . $file_path) && is_readable($docroot . $file_path)) {
        $found[] = $dom->saveXML($tag);
      }
      else {
        $missing[] = $dom->saveXML($tag);
      }
    }
    // Just add any other meta tags and assume they contain no images.
    else {
      $found[] = $dom->saveXML($tag);
    }
  }

  return array(
    'found' => $found,
    'missing' => $missing,
    'files' => $files,
  );
}

/**
 * Help to normalise the path to the icons.
 *
 * This uses a complex approach to get a relative path to the files, but it is
 * a recommended method.
 * @see https://www.drupal.org/node/837794#comment-9124435
 *
 * @param string $file_path
 *   The filename of the icon.
 * @return string
 *   The full relative path to the icon within public files.
 */
function _responsive_favicons_normalise_path($file_path) {
  global $base_path;

  // Remove absolute URLs.
  if (url_is_external($file_path)) {
    $file_path = str_replace($base_path, '', $file_path);
  }

  $wrapper = file_stream_wrapper_get_instance_by_uri('public://');
  if ($wrapper instanceof BackdropLocalStreamWrapper) {
    $relative_path = $wrapper->getDirectoryPath() . '/' . config_get('responsive_favicons.settings', 'responsive_favicons_path') . $file_path;
  }
  return $base_path . $relative_path;
}

<?php

/**
 * @file
 * Responsive favicons module file.
 */

/**
 * Implements hook_menu().
 */
function responsive_favicons_menu() {
  $items['admin/config/user-interface/responsive_favicons'] = array(
    'title' => 'Responsive favicons',
    'description' => 'Configure responsive favicons',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('responsive_favicons_config_page'),
    'access callback' => 'user_access',
    'access arguments' => array('administer themes'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'responsive_favicons.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_page_build().
 *
 * Adds responsive favicons to HTML head.
 */
function responsive_favicons_page_build(&$page) {
  $tags = responsive_favicons_load_all_icons();
  if (!empty($tags['found'])) {
    $html = array(
      '#type' => 'markup',
      '#markup' => implode(PHP_EOL, $tags['found']),
    );

    drupal_add_html_head($html, 'responsive_favicons');
  }
}

/**
 * Implements hook_html_head_alter().
 */
function responsive_favicons_html_head_alter(&$head_elements) {
  $favicon_remove_default = variable_get('responsive_favicons_remove_default', 0);
  if (empty($head_elements['responsive-favicons']) || $favicon_remove_default == 0) {
    return;
  }

  // Remove the default favicon from the head section.
  foreach ($head_elements as $key => $element) {
    if (!empty($element['#attributes'])) {
      if (array_key_exists('href', $element['#attributes'])) {
        if (strpos($element['#attributes']['href'], '/favicon.ico') !== FALSE) {
          unset($head_elements[$key]);
        }
      }
    }
  }
}

/**
 * Load the responsive favicons that are valid.
 *
 * @todo add caching using cache_set to store when all favicons are present (as
 *       this should be the usual case).
 */
function responsive_favicons_load_all_icons() {
  $icons = &drupal_static(__FUNCTION__);
  if (!isset($icons)) {
    $responsive_favicon_tags = variable_get('responsive_favicons_tags', '');
    if (empty($responsive_favicon_tags)) {
      $icons = array(
        'found' => array(),
        'missing' => array(),
      );
    }
    else {
      $html = implode('', $responsive_favicon_tags);
      $icons = _responsive_favicons_validate_tags($html);
    }
  }

  return $icons;
}

/**
 * Helper function to check whether responsive favicon files exist and are
 * readable.
 *
 * @param string $html
 *   html tag
 * @return array $missing_files
 */
function _responsive_favicons_validate_tags($html) {
  global $base_url;

  $found = array();
  $missing = array();

  $dom = new DOMDocument();
  $dom->loadHTML($html);

  // Find all the apple touch icons.
  $tags = $dom->getElementsByTagName('link');
  foreach ($tags as $tag) {
    $file_path = _responsive_favicons_normalise_path($tag->getAttribute('href'));
    $tag->setAttribute('href', $file_path);

    if (file_exists(DRUPAL_ROOT . $file_path) && is_readable(DRUPAL_ROOT . $file_path)) {
      $found[] = $dom->saveXML($tag);
    }
    else {
      $missing[] = $dom->saveXML($tag);
    }
  }

  // Find any Windows 8 meta tags.
  $tags = $dom->getElementsByTagName('meta');
  foreach ($tags as $tag) {
    $name = $tag->getAttribute('name');

    // We only validate the image file.
    if ($name === 'msapplication-TileImage') {
      $file_path = _responsive_favicons_normalise_path($tag->getAttribute('content'));
      $tag->setAttribute('content', $file_path);

      if (file_exists(DRUPAL_ROOT . $file_path) && is_readable(DRUPAL_ROOT . $file_path)) {
        $found[] = $dom->saveXML($tag);
      }
      else {
        $missing[] = $dom->saveXML($tag);
      }
    }
    // Just add any other meta tags and assume they contain no images.
    else {
      $found[] = $dom->saveXML($tag);
    }
  }

  return array(
    'found' => $found,
    'missing' => $missing,
  );
}

/**
 * Help to normalise the path to the icons.
 */
function _responsive_favicons_normalise_path($file_path) {
  global $base_path;

  // Remove absolute URLs.
  if (url_is_external($file_path)) {
    $file_path = str_replace($base_url, '', $file_path);
  }

  // There appears to be no sane way of getting a relative path to a file, so
  // this is the best for now.
  // @see https://www.drupal.org/node/837794#comment-9124435
  $wrapper = file_stream_wrapper_get_instance_by_uri(variable_get('file_default_scheme', 'public') . '://');
  if ($wrapper instanceof DrupalLocalStreamWrapper) {
    $relative_path = $wrapper->getDirectoryPath() . '/' . variable_get('responsive_favicons_path', 'favicons') . $file_path;
  }

  // Add in base path.
  return $base_path . $relative_path;
}

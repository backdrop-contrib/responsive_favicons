<?php

/**
 * @file
 * Responsive favicons module file.
 */

/**
 * Implements hook_menu().
 */
function responsive_favicons_menu() {
  $items = array();
  $items['admin/config/user-interface/responsive_favicons'] = array(
    'title' => 'Responsive favicons',
    'description' => 'Configure responsive favicons',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('responsive_favicons_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer themes'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Menu callback: displays the responsive favicons
 * settings form.
 */
function responsive_favicons_settings($form) {
  // TODO add file uploader for files generated by
  // http://realfavicongenerator.net/
  $form['responsive_favicons_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to responsive favicon files'),
    '#field_prefix' => t('public://'),
    '#default_value' => variable_get('responsive_favicons_path', 'favicons/'),
  );
  $form['responsive_favicons_tags'] = array(
    '#type' => 'textarea',
    '#title' => t('Favicon tags'),
    '#description' => t('Paste the code provided by <a href="http://realfavicongenerator.net/" target="_blank">http://realfavicongenerator.net/</a>. Make sure each link is on a separate line.'),
    '#default_value' => implode(PHP_EOL, variable_get('responsive_favicons_tags', array())),
  );
  $form['responsive_favicons_remove_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove default favicon from Drupal'),
    '#description' => t('It is recommended to remove default favicon as it can cause issues'),
    '#default_value' => variable_get('responsive_favicons_remove_default', 0),
  );
  $form['#submit'][] = 'responsive_favicons_settings_form_submit';
  return system_settings_form($form);
}

/**
 * Implements additional submit logic for responsive_favicons_settings_form().
 */
function responsive_favicons_settings_form_submit($form, &$form_state) {
  // we want to save tags as an array
  if (isset($form_state['values']['responsive_favicons_tags'])) {
    variable_set('responsive_favicons_tags', explode(PHP_EOL, $form_state['values']['responsive_favicons_tags']));
    unset($form_state['values']['responsive_favicons_tags']);
  }
}

/**
 * Implements hook_page_build() to add responsive favicons
 * to html head.
 */
function responsive_favicons_page_build(&$page) {
  $responsive_favicon_tags = variable_get('responsive_favicons_tags', '');

  if (empty($responsive_favicon_tags)) {
    return;
  }

  // Filter out missing files
  $filtered_tags = array();
  foreach ($responsive_favicon_tags as $tag) {
    $missing_tags = _responsive_favicons_missing_files($tag);
    if (empty($missing_tags)) {
      $filtered_tags[] = $tag;
    }
  }

  if (!empty($filtered_tags)) {
    $html = array('#type' => 'markup', '#markup' => implode(PHP_EOL, $filtered_tags));
    drupal_add_html_head($html, 'responsive-favicons');
  }
}

/**
 * Implements hook_requirements().
 */
function responsive_favicons_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    // Make sure that the favicon file exists
    $responsive_favicon_html = implode(PHP_EOL, variable_get('responsive_favicons_tags', array()));
    $missing_files = _responsive_favicons_missing_files($responsive_favicon_html);
    if (!empty($missing_files)) {
      $requirements['responsive_favicons'] = array(
        'title' => t('Missing responsive favicons'),
        'value' => implode('<br/>', $missing_files),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Helper function to check whether responsive favicon files
 * exists and are readable.
 *
 * @param string $html
 *   html tag
 * @return array $missing_files
 */
function _responsive_favicons_missing_files($html) {
  $missing_files = array();

  $dom = new DOMDocument();
  $dom->loadHTML($html);
  $tags = $dom->getElementsByTagName('link');

  foreach ($tags as $tag) {
    $file_path = $tag->getAttribute('href');

    if (url_is_external($file_path)) {
      $file_path = str_replace($GLOBALS['base_url'], '', $file_path);
    }
    // TODO make sure the file is readable
    if (!file_exists(DRUPAL_ROOT . $file_path)) {
      $missing_files[] = $file_path;
    }
  }

  return $missing_files;
}

/**
 * Implements hook_html_head_alter().
 */
function responsive_favicons_html_head_alter(&$head_elements) {
  $favicon_remove_default = variable_get('responsive_favicons_remove_default', 0);
  if (empty($head_elements['responsive-favicons']) || $favicon_remove_default == 0) {
    return;
  }
  // Remove the default favicon from the head section.
  foreach ($head_elements as $key => $element) {
    if (!empty($element['#attributes'])) {
      if (array_key_exists('href', $element['#attributes'])) {
        if (strpos($element['#attributes']['href'], 'misc/favicon.ico') > 0) {
          unset($head_elements[$key]);
        }
      }
    }
  }
}
